/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_LAYER_H
#define OSGEARTH_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/Config>
#include <osgEarth/Status>
#include <osgEarth/TileKey>
#include <osgEarth/PluginLoader>
#include <osg/BoundingBox>
#include <osg/StateSet>
#include <osg/RenderInfo>
#include <osgDB/Options>
#include <vector>

namespace osgEarth
{
    class SequenceControl;

    /**
     * Base serializable options class for configuring a Layer.
     */
    class OSGEARTH_EXPORT LayerOptions : public ConfigOptions
    {
    public:
        /** Name of the layer */
        optional<std::string>& name() { return _name; }
        const optional<std::string>& name() const { return _name; }

        /** Whether to use this layer in the map */
        optional<bool>& enabled() { return _enabled; }
        const optional<bool>& enabled() const { return _enabled; }

    public:
        LayerOptions();
        LayerOptions(const ConfigOptions& configOptions);

        Config getConfig() const;
        void fromConfig(const Config& conf);
        virtual void mergeConfig(const Config& conf);

    protected:
        void setDefaults();

        optional<std::string> _name;
        optional<bool> _enabled;
    };


    /**
     * Base class for all Map layers. 
     */
    class OSGEARTH_EXPORT Layer : public osg::Object
    {
    public:
        META_Object(osgEarth, Layer);

        /**
         * Constructs a map layer
         */
        Layer();

        /**
         * Constructs a map layer by deserializing options. 
         */
        Layer(LayerOptions* options);

        /**
         * This layer's unique ID.
         * This value is generated automatically at runtime and is not
         * guaranteed to be the same from one run to the next.
         */
        UID getUID() const { return _uid; }

        /**
         * Open a layer and return the status.
         * The default implementation does nothing.
         */
        virtual const Status& open() { return _status; }

        /**
         * Gets the status of this layer.
         */
        const Status& getStatus() const { return _status; }

        /**
         * @deprecated
         * Sequence controller if the layer has one.
         */
        virtual SequenceControl* getSequenceControl() { return 0L; }

        /**
         * Returns a Config object serializing this layer, if applicable.
         */
        virtual Config getConfig() const; 
        
        /**
         * Layer options governing this layer
         */
        const LayerOptions& getLayerOptions() const { return *_layerOptions; }

        /**
         * Whether the layer is enabled (used in the map)
         */
        virtual bool getEnabled() const { return getLayerOptions().enabled().get(); }


        // *** NOTE *** Everything below this line is experimental and subject to change ***

        /**
         * Access the layer's stateset, creating it is necessary
         */
        osg::StateSet* getOrCreateStateSet() {
            if (!_stateSet.valid())
                _stateSet = new osg::StateSet();
            return _stateSet.get();
        }

        /**
         * Layer's stateset, or NULL if none exists
         */
        osg::StateSet* getStateSet() const {
            return _stateSet.get();
        }

        /**
         * Sets a new stateset on this layer
         */
        void setStateSet(osg::StateSet* stateSet) {
            _stateSet = stateSet;
        }

        /**
         * How (and if) to use this layer when rendering terrain tiles.
         */
        enum RenderType
        {
            // Layer does not require its own terrain rendering pass (model layers, elevation layers)
            RENDERTYPE_NONE, 

            // Layer requires a terrain rendering pass that draws terrain tile geometry
            RENDERTYPE_TILE,

            // Layer requires a terrain rendering pass that emits terrian patches or
            // invokes a custom drawing function
            RENDERTYPE_PATCH
        };

        RenderType getRenderType() const { return _renderType; }

        void setRenderType(RenderType value) { _renderType = value; }

        virtual void modifyTileBoundingBox(const TileKey& key, osg::BoundingBox& box) const { }

    public: // osg::Object

        virtual void setName(const std::string& name);


    public: // Loading a layer from a plugin

        static Layer* create(const std::string& name, const ConfigOptions& options);

        static const ConfigOptions& getConfigOptions(const osgDB::Options*);

    protected:

        /** dtor */
        virtual ~Layer();

        Layer(const Layer& rhs, const osg::CopyOp& op) { }

        // post-ctor initialization, chain to subclasses.
        virtual void init();

        const Status& setStatus(const Status& status) { _status = status; return _status; }

        // Map will call this function when this Layer is added to a Map.
        virtual void addedToMap(const class Map*) { }

        // Map will call this function when this Layer is removed from a Map.
        virtual void removedFromMap(const class Map*) { }

    private:
        UID _uid;
        osg::ref_ptr<osg::StateSet> _stateSet;
        RenderType _renderType;
        Status _status;

    private:
        LayerOptions* _layerOptions;
        LayerOptions  _layerOptionsConcrete;
        LayerOptions& mutableLayerOptions() { return *_layerOptions; }

        // allow the map access to the addedToMap/removedFromMap methods
        friend class Map;
    };

    typedef std::vector< osg::ref_ptr<Layer> > LayerVector;

    
#define REGISTER_OSGEARTH_LAYER(NAME,CLASS) \
    extern "C" void osgdb_##NAME(void) {} \
    static osgEarth::RegisterPluginLoader< osgEarth::PluginLoader<CLASS, osgEarth::Layer> > g_proxy_##CLASS_##NAME( #NAME );

} // namespace osgEarth

#endif // OSGEARTH_IMAGE_TERRAIN_LAYER_H
